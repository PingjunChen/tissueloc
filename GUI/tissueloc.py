# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tissueloc.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
import os, copy
import cv2, imutils
import numpy as np
import pickle

from tl_utils import rgb2gray, locate_tissue_cnts


class Ui_tissueloc(object):
    def setupUi(self, tissueloc):
        tissueloc.setObjectName("tissueloc")
        tissueloc.resize(1071, 710)
        tissueloc.setFixedSize(1071, 710)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(tissueloc.sizePolicy().hasHeightForWidth())
        tissueloc.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(tissueloc)
        self.centralwidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(12, 12, 1041, 661))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.img_lbl = QtWidgets.QLabel(self.widget)
        self.img_lbl.setText("")
        self.img_lbl.setObjectName("img_lbl")
        self.gridLayout.addWidget(self.img_lbl, 0, 0, 3, 2)
        self.label_max = QtWidgets.QLabel(self.widget)
        self.label_max.setObjectName("label_max")
        self.gridLayout.addWidget(self.label_max, 0, 2, 1, 1)
        self.color_slider = QtWidgets.QSlider(self.widget)
        self.color_slider.setMinimum(132)
        self.color_slider.setMaximum(228)
        self.color_slider.setSingleStep(4)
        self.color_slider.setProperty("value", 204)
        self.color_slider.setOrientation(QtCore.Qt.Vertical)
        self.color_slider.setObjectName("color_slider")
        self.gridLayout.addWidget(self.color_slider, 1, 2, 1, 1)
        self.label_min = QtWidgets.QLabel(self.widget)
        self.label_min.setObjectName("label_min")
        self.gridLayout.addWidget(self.label_min, 2, 2, 1, 1)
        self.open_btn = QtWidgets.QPushButton(self.widget)
        self.open_btn.setObjectName("open_btn")
        self.gridLayout.addWidget(self.open_btn, 3, 0, 1, 1)
        self.save_btn = QtWidgets.QPushButton(self.widget)
        self.save_btn.setObjectName("save_btn")
        self.gridLayout.addWidget(self.save_btn, 3, 1, 1, 1)
        tissueloc.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(tissueloc)
        self.statusbar.setObjectName("statusbar")
        tissueloc.setStatusBar(self.statusbar)

        self.retranslateUi(tissueloc)
        self.color_slider.valueChanged['int'].connect(self.color_value)
        self.open_btn.clicked.connect(self.loadImage)
        self.save_btn.clicked.connect(self.saveContours)
        QtCore.QMetaObject.connectSlotsByName(tissueloc)

		# Added code here
        self.filename = None # Will hold the image address location
        self.cnts = None
        self.color_value_default = 204 # Default color value
        self.color_value_now = 204 # Updated brightness value
        self.max_width = 1024
        self.max_height = 640


    def loadImage(self):
        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        self.image = cv2.imread(self.filename)
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
        # convert to rgb to gray
        self.gray_img = rgb2gray(self.image)
        self.color_slider.setValue(self.color_value_default)
        self.cnts = locate_tissue_cnts(self.gray_img, self.color_value_now)

        show_img = copy.deepcopy(self.image)
        cv2.drawContours(show_img, self.cnts, -1, (0, 255, 0), 9)
        self.setPhoto(show_img)


    def setPhoto(self, image):
        hw_ratio = image.shape[0] * 1.0 / image.shape[1]
        if hw_ratio <= self.max_height * 1.0 / self.max_width:
            resize_w = self.max_width
        else:
            resize_w = int(image.shape[1] * self.max_height * 1.0 / image.shape[0])
        image = imutils.resize(image, width = resize_w)
        image = QImage(image, image.shape[1], image.shape[0], image.strides[0], QImage.Format_RGB888)
        self.img_lbl.setPixmap(QtGui.QPixmap.fromImage(image))
        self.img_lbl.setAlignment(QtCore.Qt.AlignCenter)


    def color_value(self, value):
        """ Take the colore threshold from vertical slider.
        """
        self.color_value_now = value
        self.update_tissueloc()


    def changeColorValue(self, img, value):
        """ Take the image and the threshold and perform the tissue localization.
        """
        self.cnts = locate_tissue_cnts(self.gray_img, self.color_value_now)
        show_img = copy.deepcopy(self.image)
        cv2.drawContours(show_img, self.cnts, -1, (0, 255, 0), 9)

        return show_img


    def update_tissueloc(self):
        img = self.changeColorValue(self.image, self.color_value_now)
        self.setPhoto(img)


    def saveContours(self):
        img_dir = os.path.dirname(self.filename)
        img_fullname = os.path.basename(self.filename)
        img_name = os.path.splitext(img_fullname)[0]
        cnt_path = os.path.join(img_dir, img_name + "_cnts.pkl")
        with open(cnt_path, "wb") as fp:
            pickle.dump(self.cnts, fp)


    def retranslateUi(self, tissueloc):
        _translate = QtCore.QCoreApplication.translate
        tissueloc.setWindowTitle(_translate("tissueloc", "TissueLoc"))
        self.label_max.setText(_translate("tissueloc", "228"))
        self.label_min.setText(_translate("tissueloc", "132"))
        self.open_btn.setText(_translate("tissueloc", "Open"))
        self.save_btn.setText(_translate("tissueloc", "Save"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    tissueloc = QtWidgets.QMainWindow()
    ui = Ui_tissueloc()
    ui.setupUi(tissueloc)
    tissueloc.show()
    sys.exit(app.exec_())
